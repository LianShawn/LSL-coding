#first input the data

library(ISLR2)

#cheak the dimension of data
dim(Smarket) 
summary(Smarket)


#logistic regression

glm.fits <- glm(Direction ∼ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket , family = binomial)

summary(glm.fits)

#check the coefficient for this fitted model
coef(glm.fits)

#or use the summary()function to access particular asoects of the fitted mdel
summary(glm.fits)$coef
summary(glm.fits)$coef[, 4]

#predict the data
glm.probs <- predict(glm.fits, type = "response")

#this data is about the market, so we want to check whether it going up of down. the result is the number of 
contrasts(Direction)

#create a vector of class predictions based on whether the predicted probability of a market incresase is greater than or less than 0.5
glm.pred <- rep("Down", 1250)
glm.pred[glm.probs > .5] = "Up"

#divide the data into training data and test data
train <- (Year < 2005)
Smarket.2005 <- Smarket[!train, ]
Direction.2005 <- Direction[!train]

#use training data to train, and predict is using 2005
glm.fits <- glm(
  Direction ∼ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Smarket , family = binomial , subset = train
)
glm.probs <- predict(glm.fits, Smarket.2005,type = "response")

#check the predict data
glm.pred <- rep("Down", 252)
glm.pred[glm.probs > .5] <- "Up"
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)

#not use all of the data
glm.fits <- glm(Direction ∼ Lag1 + Lag2, data = Smarket, family = binomial , subset = train)
glm.probs <- predict(glm.fits, Smarket.2005, type = "response")
glm.pred <- rep("Down", 252)
glm.pred[glm.probs > .5] <- "Up"
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)


#linear discriminant analysis

library(MASS)
lda.fit <- lda(Direction ∼ Lag1 + Lag2, data = Smarket,subset = train)

lda.pred <- predict(lda.fit, Smarket.2005)

lda.class <- lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class == Direction.2005)

#Quadratic discriminat analysis

qda.fit <- qda(Direction ∼ Lag1 + Lag2, data = Smarket, subset = train)
qda.class <- predict(qda.fit, Smarket.2005)$class

table(qda.class, Direction.2005)
mean(qda.class == Direction.2005)


#native bayes
library(e1071)
nb.fit <- naiveBayes(Direction ∼ Lag1 + Lag2, data = Smarket,subset = train)
mean(Lag1[train][Direction[train] == "Down"])
sd(Lag1[train][Direction[train] == "Down"])

nb.class <- predict(nb.fit, Smarket.2005)
table(nb.class, Direction.2005)
mean(nb.class == Direction.2005)

#KNN
library(class)
train.X <- cbind(Lag1, Lag2)[train, ]
test.X <- cbind(Lag1, Lag2)[!train, ]
train.Direction <- Direction[train]

set.seed (1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
table(knn.pred, Direction.2005)



